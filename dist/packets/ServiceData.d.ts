/// <reference types="node" />
export declare class ServiceData {
    opCode: number;
    dataType: number;
    crownstoneId: number;
    switchState: number;
    flagsBitmask: number;
    temperature: number;
    powerFactor: number;
    powerUsageReal: number;
    powerUsageApparent: number;
    accumulatedEnergy: number;
    setupMode: boolean;
    stateOfExternalCrownstone: boolean;
    data: Buffer;
    encryptedData: Buffer;
    encryptedDataStartIndex: number;
    dimmingAvailable: any;
    dimmingAllowed: any;
    hasError: any;
    switchLocked: any;
    partialTimestamp: any;
    timestamp: any;
    validation: any;
    errorTimestamp: any;
    errorsBitmask: any;
    errorMode: any;
    timeIsSet: any;
    switchCraftEnabled: any;
    uniqueIdentifier: any;
    deviceType: string;
    rssiOfExternalCrownstone: number;
    validData: boolean;
    dataReadyForUse: boolean;
    constructor(data: Buffer);
    parse(): void;
    hasCrownstoneDataFormat(): boolean;
    getJSON(): {
        opCode: number;
        dataType: number;
        stateOfExternalCrownstone: boolean;
        hasError: any;
        setupMode: boolean;
        crownstoneId: number;
        switchState: number;
        flagsBitmask: number;
        temperature: number;
        powerFactor: number;
        powerUsageReal: number;
        powerUsageApparent: number;
        accumulatedEnergy: number;
        timestamp: any;
        dimmingAvailable: any;
        dimmingAllowed: any;
        switchLocked: any;
        switchCraftEnabled: any;
        errorMode: any;
        errors: {
            overCurrent: boolean;
            overCurrentDimmer: boolean;
            temperatureChip: boolean;
            temperatureDimmer: boolean;
            dimmerOnFailure: boolean;
            dimmerOffFailure: boolean;
            bitMask: number;
        };
        uniqueElement: any;
        timeIsSet: any;
        deviceType: string;
        rssiOfExternalCrownstone: number;
    };
    isSetupPackage(): boolean;
    decrypt(key: any): void;
}
