export declare const ControlType: {
    SWITCH: number;
    PWM: number;
    SET_TIME: number;
    GOTO_DFU: number;
    RESET: number;
    FACTORY_RESET: number;
    KEEP_ALIVE_STATE: number;
    KEEP_ALIVE_REPEAT: number;
    ENABLE_MESH: number;
    ENABLE_ENCRYPTION: number;
    ENABLE_IBEACON: number;
    ENABLE_CONTINUOUS_POWER_MANAGEMENT: number;
    ENABLE_SCANNER: number;
    SCAN_FOR_DEVICES: number;
    USER_FEEDBACK: number;
    SCHEDULE_ENTRY: number;
    RELAY: number;
    VALIDATE_SETUP: number;
    REQUEST_SERVICE_DATA: number;
    DISCONNECT: number;
    SET_LED: number;
    NO_OPERATION: number;
    INCREASE_TX: number;
    RESET_ERRORS: number;
    MESH_KEEP_ALIVE_REPEAT: number;
    MESH_MULTI_SWITCH: number;
    SCHEDULE_REMOVE: number;
    MESH_KEEP_ALIVE_STATE: number;
    MESH_COMMAND: number;
    ALLOW_DIMMING: number;
    LOCK_SWITCH: number;
    SETUP: number;
    SWITCHCRAFT: number;
    UART: number;
};
export declare const ConfigurationType: {
    DEVICE_NAME: number;
    DEVICE_TYPE: number;
    ROOM: number;
    FLOOR: number;
    NEARBY_TIMEOUT: number;
    PWM_PERIOD: number;
    IBEACON_MAJOR: number;
    IBEACON_MINOR: number;
    IBEACON_UUID: number;
    IBEACON_TX_POWER: number;
    WIFI_SETTINGS: number;
    TX_POWER: number;
    ADVERTISEMENT_INTERVAL: number;
    PASSKEY: number;
    MIN_ENV_TEMP: number;
    MAX_ENV_TEMP: number;
    SCAN_DURATION: number;
    SCAN_SEND_DELAY: number;
    SCAN_BREAK_DURATION: number;
    BOOT_DELAY: number;
    MAX_CHIP_TEMP: number;
    SCAN_FILTER: number;
    SCAN_FILTER_FRACTION: number;
    CURRENT_LIMIT: number;
    MESH_ENABLED: number;
    ENCRYPTION_ENABLED: number;
    IBEACON_ENABLED: number;
    SCANNER_ENABLED: number;
    CONTINUOUS_POWER_MEASUREMENT_ENABLED: number;
    TRACKER_ENABLED: number;
    ADC_SAMPLE_RATE: number;
    POWER_SAMPLE_BURST_INTERVAL: number;
    POWER_SAMPLE_CONTINUOUS_INTERVAL: number;
    POWER_SAMPLE_CONTINUOUS_NUMBER_SAMPLES: number;
    CROWNSTONE_IDENTIFIER: number;
    ADMIN_ENCRYPTION_KEY: number;
    MEMBER_ENCRYPTION_KEY: number;
    GUEST_ENCRYPTION_KEY: number;
    DEFAULT_ON: number;
    SCAN_INTERVAL: number;
    SCAN_WINDOW: number;
    RELAY_HIGH_DURATION: number;
    LOW_TX_POWER: number;
    VOLTAGE_MULTIPLIER: number;
    CURRENT_MULITPLIER: number;
    VOLTAGE_ZERO: number;
    CURRENT_ZERO: number;
    POWER_ZERO: number;
    POWER_AVERAGE_WINDOW: number;
    MESH_ACCESS_ADDRESS: number;
};
export declare const MeshHandle: {
    HUB: number;
    DATA: number;
};
export declare const StateType: {
    RESET_COUNTER: number;
    SWITCH_STATE: number;
    ACCUMULATED_ENERGY: number;
    POWER_USAGE: number;
    TRACKED_DEVICES: number;
    SCHEDULE: number;
    OPERATION_MODE: number;
    TEMPERATURE: number;
    TIME: number;
    ERROR_BITMASK: number;
};
export declare const OpCode: {
    READ: number;
    WRITE: number;
    NOTIFY: number;
};
export declare const MeshCommandType: {
    CONTROL: number;
    BEACON: number;
    CONFIG: number;
    STATE: number;
};
export declare const IntentType: {
    REGION_ENTER: number;
    REGION_EXIT: number;
    ENTER: number;
    EXIT: number;
    MANUAL: number;
};
export declare const MeshKeepAliveTypes: {
    SHARED_TIMEOUT: number;
};
export declare const MeshMultiSwitchType: {
    SIMPLE_LIST: number;
};
export declare const DeviceType: {
    undefined: number;
    plug: number;
    guidestone: number;
    builtin: number;
    crownstoneUSB: number;
    getLabel: (value: any) => string;
};
export declare const ResultValue: {
    SUCCESS: number;
    WAIT_FOR_SUCCESS: number;
    BUFFER_UNASSIGNED: number;
    BUFFER_LOCKED: number;
    WRONG_PAYLOAD_LENGTH: number;
    WRONG_PARAMETER: number;
    INVALID_MESSAGE: number;
    UNKNOWN_OP_CODE: number;
    UNKNOWN_TYPE: number;
    NOT_FOUND: number;
    NO_ACCESS: number;
    NOT_AVAILABLE: number;
    NOT_IMPLEMENTED: number;
    WRITE_DISABLED: number;
    ERR_WRITE_NOT_ALLOWED: number;
    ADC_INVALID_CHANNEL: number;
};
export declare const ProcessType: {
    CONTINUE: number;
    FINISHED: number;
    ABORT_ERROR: number;
};
